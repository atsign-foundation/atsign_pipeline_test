name: at_server
# Runs the workflow on the below events:
# 1. on pull request raised to trunk branch.
# 2. on push event to trunk branch.
# 3. on tagging a release
on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:

jobs:

  # Runs dart lint rules and unit tests on at_persistence_root_server
  test_at_persistence_root_server:
    env:
      working-directory: ./at_root/at_persistence_root_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies in at_persistence_root_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_persistence_root_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_persistence_root_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1


  # Runs dart lint rules and unit tests on at_root_server
  test_at_root_server:
    env:
      working-directory: ./at_root/at_root_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies in at_root_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_root_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_root_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1


  # Runs dart lint rules and unit tests on at_persistence_secondary_server
  test_at_persistence_secondary_server:
    runs-on: ubuntu-latest
    env:
      working-directory: ./at_secondary/at_persistence_secondary_server
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies in at_persistence_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_persistence_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_persistence_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1


  # Runs dart lint rules and unit tests on at_secondary_server
  test_at_secondary_server:
    runs-on: ubuntu-latest
    env:
      working-directory: ./at_secondary/at_secondary_server
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies in at_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1


  # On completed of above jobs, runs functional tests on at_secondary.
  # If tests are successful, uploads root server and secondary server binaries for subsequent jobs
  run_functional_test:
    needs: [ test_at_persistence_root_server, test_at_root_server, test_at_persistence_secondary_server, test_at_secondary_server ]
    env:
      working-directory: at_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        working-directory: at_functional_test
        run: dart pub get

      - name: Run dart analyzer
        working-directory: at_functional_test
        run: dart analyze

      - name: Add entry to hosts file
        run: echo "127.0.0.1    vip.ve.atsign.zone" | sudo tee -a /etc/hosts

      - name: Generate root server binary
        working-directory: at_root/at_root_server
        # -o : path to copy the root binary
        run: dart pub get && dart compile exe bin/main.dart -o root

      - name: Generate secondary server binary
        working-directory: at_secondary/at_secondary_server
        run: dart pub get && dart compile exe bin/main.dart -o secondary

      - name: copy binaries to at_functional_test
        run: cp at_root/at_root_server/root at_functional_test/lib/root/ && cp at_secondary/at_secondary_server/secondary at_functional_test/lib/secondary/

      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          file: at_functional_test/lib/Dockerfile
          context: at_functional_test/lib/
          tags: at_virtual_env:trunk

      - name: Run docker container
        # -d: run container in detached mode. --rm: remove container on stop -p: bind ports to host
        run: docker container run -d --rm --name at_virtual_env_cont -p 6379:6379 -p 25000-25017:25000-25017 -p 64:64 at_virtual_env:trunk

      - name: Check test environment readiness
        working-directory: at_functional_test
        run: dart run test/check_test_env.dart

      - name: Run tests
        working-directory: at_functional_test
        run: pub run test

      # On push event, upload root server binary for using in deploy job
      - name: upload root server
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: root-server
          path: at_root/at_root_server/root

      # On push event, upload secondary server binary for using in deploy job
      - name: upload secondary server
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: secondary-server
          path: at_secondary/at_secondary_server/secondary

      - name: Stop docker container
        run: docker container stop at_virtual_env_cont

      # Remove image created for at_virtual_env:trunk for running functional tests in pipeline.
      - name: Remove docker image
        run: docker rmi at_virtual_env:trunk


  # The below jobs run's on completion of 'run_functional_test' job.
  # This job run's on trigger event 'push' and when a release is tagged.
  # The job builds the production version of secondary server docker image and pushes to docker hub.
  push_prod_secondary_image:
    # Runs only after functional tests are completed.
    needs: [ run_functional_test ]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    env:
      working-directory: at_server
    runs-on: ubuntu-latest
    environment: 
      name: Production
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.3.0

      - name: Login to DockerHub
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Gets the secondary server binary generated from the above "secondary" job.
      - name: Get secondary server
        uses: actions/download-artifact@v2
        with:
          name: secondary-server
          path: at_secondary/at_secondary_server
      # Builds and pushes the secondary server image to docker hub.
      - name: Build and push secondary image for amd64 and arm64
        id: docker_build_secondary
        uses: docker/build-push-action@v2.4.0
        with:
          push: true
          context: at_secondary
          tags: |
            atsigncompany/secondary:dess-narendra
            atsigncompany/secondary:prod-narendra
            atsigncompany/secondary:prod-narendra-gha${{ github.run_number }}
          platforms: |
            linux/amd64
            linux/arm64/v8
      - name: Image digest of secondary server
        run: echo ${{ steps.docker_build_secondary.outputs.digest }}

  # This job run's on trigger event 'push' to trunk branch.
  # The job builds the staging version of root server image and pushes to docker hub.
  # The jobs run's on completion of 'run_functional_test' job.
  push_staging_root_image:
    # Runs only after functional tests are completed.
    needs: [ run_functional_test ]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    environment: 
      name: Staging
    env:
      working-directory: at_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Extract branch for docker tag
      - name: Get branch name
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.3.0

      - name: Login to DockerHub
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Gets the root server binary generated from the above "root" job.
      - name: Get root server
        uses: actions/download-artifact@v2
        with:
          name: root-server
          path: at_root/at_root_server

      # Builds and pushes the secondary server image to docker hub.
      - name: Build and push secondary image for amd64 and arm64
        id: docker_build_secondary
        uses: docker/build-push-action@v2.4.0
        with:
          push: true
          context: at_secondary
          tags: |
            atsigncompany/root:prod-narendra
            atsigncompany/root:prod-narendra
            atsigncompany/root:prod-${{ env.BRANCH }}-gha${{ github.run_number }}-narendra
          platforms: |
            linux/amd64
            linux/arm64/v8
      - name: Image digest of root server
        run: echo ${{ steps.docker_build_secondary.outputs.digest }}

  # Deploy root server image to prod cluster
  deploy_prod_root_sever:
    name: Deploy to Root Production 
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: ketch # TODO: update to cluster name
      GKE_ZONE: us-west1-a # TODO: update to cluster zone
      DEPLOYMENT_NAME: ketch-test # TODO: update to deployment name
      IMAGE: static-site
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    environment: 
      name: Production
    needs: [ push_staging_secondary_image ]
    runs-on: ubuntu-latest
    steps:
      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
       with:
         service_account_key: ${{ secrets.GKE_SA_KEY }}
         project_id: ${{ secrets.GKE_PROJECT }}

      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
         gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image atsigncompany/root:test_dev_env:GHA${{ github.run_number }}
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
